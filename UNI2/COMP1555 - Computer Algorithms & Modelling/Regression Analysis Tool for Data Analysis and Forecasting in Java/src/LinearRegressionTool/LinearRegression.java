package LinearRegressionTool;

// ! Don't forget to import commons-math3-3.3.jar, jmathplot.jar, JTattoo-1.6.10.jar
import java.awt.*;
import java.io.*;
import java.text.DecimalFormat;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.table.*;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.regression.SimpleRegression;
import org.math.plot.Plot2DPanel;
import org.math.plot.plotObjects.BaseLabel;

/**
 *
 * @author ag306
 */
public class LinearRegression extends javax.swing.JFrame {

    // Dependant variable Y.length = 28
    double[] y = {4.9176, 5.0208, 4.5429, 4.5573, 5.0597, 3.8910, 5.8980, 5.6039, 16.4202, 14.4598, 5.8282, 5.3003, 6.2712, 5.9592, 5.0500,
        5.6039, 8.2464, 6.6969, 7.7841, 9.0384, 5.9894, 7.5422, 8.7951, 6.0931, 8.3607, 8.1400, 9.1416, 12.0000};

    // Declaration
    double x[] = null;
    String parameterName = null;
    SimpleRegression sr = new SimpleRegression();
    Plot2DPanel plot = new Plot2DPanel();
    JTextArea results = new JTextArea();
    FileReader file = null;
    JFrame frame = new JFrame("Linear Regression Analysis");

    /**
     * Creates new form LinearRegression
     */
    public LinearRegression() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        forecastField = new javax.swing.JTextField();
        forecastButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        forecastLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Regression Analysis Tool for Data Analysis and Forecasting");
        setResizable(false);

        jPanel1.setName(""); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Please select an independent variable Xi:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. of bathrooms", "Area of the site (1000's sq ft)", "Size of living space (1000's sq ft)", "No. of garages", "No. of rooms", "No. of bedrooms", "Age (years)" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Plot Scatter Diagram");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Forecast house selling price Y by entering a value: ");

        forecastField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecastFieldActionPerformed(evt);
            }
        });

        forecastButton.setText("Forecast");
        forecastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecastButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Get analysis details");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Plot Linear Regression Line");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        forecastLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        forecastLabel.setForeground(new java.awt.Color(204, 0, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "R", "R^2", "Slope", "Y Intercept", "Std. Err. of Estimate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Y", "Xi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "X", "Forecasted Y"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"N", null, null},
                {"Mean", null, null},
                {"Variance", null, null},
                {"Std. Dev", null, null}
            },
            new String [] {
                "", "X", "Y"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"∑X", null},
                {"∑X^2", null},
                {"∑Y", null},
                {"∑Y^2", null},
                {"∑XY", null}
            },
            new String [] {
                "    ", "    "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(forecastLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox1, 0, 196, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forecastField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forecastButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton4)
                                    .addComponent(jButton2))
                                .addGap(36, 36, 36)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(forecastField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(forecastButton))
                                .addComponent(forecastLabel)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );

        jButton4.getAccessibleContext().setAccessibleName("Plot Linear Regression Line");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(150, 20, 983, 319);
    }// </editor-fold>//GEN-END:initComponents
    public void ClearContent() {
        plot.removeAllPlots(); // clear the plots
        plot.plotToolBar.removeAll(); //..
        plot.removeAllPlotables();   //..
        sr.clear(); // clear the data used for the previous regression
        frame.dispose(); //close previos graph
    }

    // Button "Plot Linear Regression" 
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ClearContent(); // clear all content
        DisplayLSRegression(); // displays the LS Regression plot
    }//GEN-LAST:event_jButton4ActionPerformed

    // Button "Get analysis details"
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // creates new model        
        // and clear content of the X Y Inputs Table to avoid duplicates
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        while (model.getRowCount() > 0) {
            for (int i = 0; i < model.getRowCount(); ++i) {
                model.removeRow(i);
            }
        }

        // gets the method to fill all tables
        ShowDetails();
    }//GEN-LAST:event_jButton2ActionPerformed
    // Button "Forecast"
    private void forecastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecastButtonActionPerformed
        // Declare variables
        double input;
        double forecast;

        DecimalFormat pounds = new DecimalFormat("£###,##0.00"); // Set the format of house price with pound sign
        forecastLabel.setForeground(Color.yellow); // Sets the label color to yellow

        // Forecast table  
        TableModel model2 = jTable3.getModel();
        try {
            String str = forecastField.getText();
            input = Double.parseDouble(str);
            // y = a + b*x      a= Intercept b= Slope x= user input  y= predicted house price
            forecast = sr.getIntercept() + (sr.getSlope() * input);

            // Checks if the house is available by comparing the input 
            // with the minimum and maximum value of Y
            if (forecast < StatUtils.min(y) || forecast > StatUtils.max(y)) {
                forecastLabel.setText("House not available!");
                // clear content of table
                model2.setValueAt(null, 0, 0);
                model2.setValueAt(null, 0, 1);
                jTable3.setModel(model2);
            } else {
                forecastLabel.setText("The predicted House price is: " + pounds.format(forecast * 100000));
                // set values for Forecast Table
                model2.setValueAt(forecastField.getText(), 0, 0);
                model2.setValueAt(forecast, 0, 1);
                jTable3.setModel(model2);
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Please enter a numerical value!"); // Exception Message box
        }
        forecastField.setText(""); // Clear user input used in forecasting
    }//GEN-LAST:event_forecastButtonActionPerformed

    // Button "Plot Scatter diagram"
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ClearContent(); // clear all content
        DisplayScatterDiagram(); // displays the Scatter plot
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void forecastFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecastFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forecastFieldActionPerformed

    public void DisplayLSRegression() {
        // reads a file from the main folder depending on user's independent variable selection from dropbox 
        try {
            file = new FileReader(".\\src\\x" + jComboBox1.getSelectedIndex() + ".txt");
        } catch (FileNotFoundException e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(null, "Data file not found!"); // display exception Message Box
        }

        // declaring new variables to be used in the loop
        double[] xi = new double[y.length];
        int j = 0;

        try {
            Scanner input = new Scanner(file); // creates Scanner to read a file
            while (input.hasNext()) {
                xi[j] = input.nextDouble();   // adds every next value in it
                j++;                          // +1 every time
            }
            input.close();                    // close file reading
        } catch (Exception e) {
            System.out.println(e);
        }
        x = xi; // saves the content of input file array to the main array X

        double[] yc = new double[y.length];
        try {
            for (int i = 0; i < x.length; i++) { // Adds all the values of Y and X
                sr.addData(x[i], y[i]);          // to be used in Scatter plot
            }
            for (int i = 0; i < x.length; i++) { // Adds in array the predicted values
                yc[i] = sr.predict(x[i]);        // that will be in need to plot the Regression Line
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        plot.addLegend("South"); //add legend to bottom of the plot
        plot.addScatterPlot("Selling Price of House", x, y); // adds the scatter plot
        plot.addLinePlot(("Regression Line"), x, yc); // adds the regression line

        // Creates the plot title for chosen parameter
        BaseLabel title = new BaseLabel("Linear Regression Analysis of House Prices by " + jComboBox1.getSelectedItem() + "", Color.BLUE, 0.5, 1.1);
        plot.addPlotable(title);

        plot.setAxisLabel(0, jComboBox1.getSelectedItem().toString()); // change name of X axis 
        plot.getAxis(0).setLightLabelAngle(-Math.PI / 4); // rotate light labels
        plot.getAxis(0).setLabelPosition(0.5, -0.15); // change X axis title position relatively to the base of the plot

        plot.setAxisLabel(1, "House Price in £100,000's"); // change name of Y axis        

        // Frame settings
        frame.setSize(666, 390);
        frame.add(plot, BorderLayout.CENTER);
        frame.setLocation(320, 340);
        frame.setVisible(true);

    }

    public void DisplayScatterDiagram() {
        // reads a file from the main folder depending on user's independent variable selection from dropbox 
        try {
            file = new FileReader(".\\src\\x" + jComboBox1.getSelectedIndex() + ".txt");
        } catch (FileNotFoundException e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(null, "Data file not found!"); // display Message Box
        }

        // declaring new variables to be used in the loop
        double[] xi = new double[y.length];
        int j = 0;

        try {
            Scanner input = new Scanner(file); // creates Scanner to read a file
            while (input.hasNext()) {
                xi[j] = input.nextDouble();   // adds every next value in it
                j++;                          // +1 every time
            }
            input.close();                    // close file reading
        } catch (Exception e) {
            System.out.println(e);
        }
        x = xi; // saves the content of input file array to the main array X  

        // Adds all the values of Y and X to be used in Regression
        try {
            for (int i = 0; i < x.length; i++) {
                sr.addData(x[i], y[i]);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        plot.addLegend("South"); // Sets the legend to the bottom of the plot
        plot.addScatterPlot("Selling Price of House", x, y); // Creates the scatter plot with X Y values

        // Creates the plot title for chosen parameter
        BaseLabel title = new BaseLabel("Scatter Plot of House Prices by " + jComboBox1.getSelectedItem() + "", Color.BLUE, 0.5, 1.1);
        plot.addPlotable(title);

        plot.setAxisLabel(0, jComboBox1.getSelectedItem().toString()); // change name of X axis 
        plot.getAxis(0).setLightLabelAngle(-Math.PI / 4); // rotate light labels
        plot.getAxis(0).setLabelPosition(0.5, -0.15); // change X axis title position relatively to the base of the plot

        plot.setAxisLabel(1, "House Price in £100,000s"); // change name of Y axis        

        // Setting up the frame
        frame.setSize(666, 390);
        frame.add(plot, BorderLayout.CENTER);
        frame.setLocation(320, 340);
        frame.setVisible(true);

    }

    public void ShowDetails() {
        // Declaring variables
        double stdDevY, stdDevX, sumSqErr, stdErrEst, sumXY;

        stdDevY = Math.sqrt(StatUtils.variance(y)); //Calculate Std. Dev. Y
        stdDevX = Math.sqrt(StatUtils.variance(x)); //Calculate Std. Dev. X
        sumSqErr = sr.getSumSquaredErrors(); // Calculate Sum of Squares for Error (SSE)      
        stdErrEst = Math.sqrt(sumSqErr / (sr.getN() - 2)); // Calculate Standart Error of Estimate (SEE)
        sumXY = StatUtils.sum(x) * StatUtils.sum(y); // Calculate ∑XY

        // Linear Regression Analysis Results Table
        TableModel model1 = jTable1.getModel();
        model1.setValueAt(sr.getR(), 0, 0); //Puts correlation coefficient in table
        model1.setValueAt(sr.getRSquare(), 0, 1); //Puts coefficient of determination in table
        model1.setValueAt(sr.getSlope(), 0, 2); //Puts the Slope in table
        model1.setValueAt(sr.getIntercept(), 0, 3); //Puts the Inrcept in table
        model1.setValueAt(stdErrEst, 0, 4); //Puts the Standart Error of Estimate in table
        jTable1.setModel(model1);

        // Table of inputs for Y and Xi
        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        for (int i = 0; i < x.length; i++) {         // Puts in table user input X
            model2.addRow(new Object[]{y[i], x[i]}); // and the predicted value Y
        }
        jTable2.setModel(model2);

        // Data Summary Table to display ∑X,∑X2,∑Y,∑Y2,∑XY
        TableModel model5 = jTable5.getModel();
        model5.setValueAt(StatUtils.sum(x), 0, 1); //Puts ∑X in table
        model5.setValueAt(StatUtils.sumSq(x), 1, 1); //Puts ∑X2 in table
        model5.setValueAt(StatUtils.sum(y), 2, 1); //Puts ∑Y in table
        model5.setValueAt(StatUtils.sumSq(y), 3, 1); //Puts ∑Y2 in table
        model5.setValueAt(sumXY, 4, 1); //Puts ∑XY in table
        jTable5.setModel(model5);

        // Data summary Table to display N, Mean, Variance, Std. Dev.
        TableModel model4 = jTable4.getModel();
        model4.setValueAt(sr.getN(), 0, 1); // Puts N in table
        model4.setValueAt(sr.getN(), 0, 2); // Puts N in table
        model4.setValueAt(StatUtils.mean(x), 1, 1); //Puts Mean of X in table
        model4.setValueAt(StatUtils.mean(y), 1, 2); //Puts Mean of Y in table
        model4.setValueAt(StatUtils.variance(x), 2, 1); //Puts Variance X in table
        model4.setValueAt(StatUtils.variance(y), 2, 2); //Puts Variance Y in table
        model4.setValueAt(stdDevX, 3, 1); //Puts Std Dev of X in table
        model4.setValueAt(stdDevY, 3, 2); //Puts Std Dev of Y in table
        jTable4.setModel(model4);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                /*  if ("Nimbus".equals(info.getName())) {
                 javax.swing.UIManager.setLookAndFeel(info.getClassName());
                 break;
                 } */
                UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LinearRegression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LinearRegression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LinearRegression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LinearRegression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LinearRegression().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton forecastButton;
    private javax.swing.JTextField forecastField;
    private javax.swing.JLabel forecastLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    // End of variables declaration//GEN-END:variables
}
